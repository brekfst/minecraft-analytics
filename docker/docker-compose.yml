version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: minecraft-analytics-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Initialize database with our schema
      - ../database/schema.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '5432:5432'
    networks:
      - minecraft-analytics-network

  redis:
    image: redis:alpine
    container_name: minecraft-analytics-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - minecraft-analytics-network

  server:
    build:
      context: ..
      dockerfile: docker/Dockerfile.server
    container_name: minecraft-analytics-server
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=5000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - API_KEY=${API_KEY}
    ports:
      - '5000:5000'
    networks:
      - minecraft-analytics-network

  client:
    build:
      context: ..
      dockerfile: docker/Dockerfile.client
    container_name: minecraft-analytics-client
    restart: unless-stopped
    depends_on:
      - server
    environment:
      - NODE_ENV=${NODE_ENV}
      - REACT_APP_API_URL=http://localhost:5000/api
    ports:
      - '3000:80'
    networks:
      - minecraft-analytics-network

networks:
  minecraft-analytics-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: